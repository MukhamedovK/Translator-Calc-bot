import logging
from googletrans import Translator

from aiogram import Bot, Dispatcher, executor
from aiogram.types import *
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from keyboard import *
from state import *
from config import BOT_TOKEN


logging.basicConfig(level=logging.INFO)

bot = Bot(token=BOT_TOKEN, parse_mode='html')
storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


@dp.message_handler(commands=['start'])
async def start_bot_command(message: Message):
    btn = await start_btn()
    await message.answer(f"<b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}! </b>\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, <u><b>–≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:</b></u> ", reply_markup=btn)
    

@dp.message_handler()
async def text_bot(message: Message):
    text = message.text
    if text == "üÄÑÔ∏è –ü–µ—Ä–µ–≤–æ–¥—á–∏–∫":
        in_btn = await inline_btn()
        btn1 = await translate_back_btn()
        await message.answer("–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ <u><b>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b></u>?", reply_markup=in_btn)        
        await message.answer("–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <u><b>–û –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ</b></u>", reply_markup=btn1)

    elif text == "üì≤ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        btn = await calc_btn()
        btn1 = await calculate_back_btn()
        await message.answer("–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä: \n\n", reply_markup=btn1)
        await message.answer("0", reply_markup=btn)

    elif text == "üì¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å":
        await message.answer("–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å <b>–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b> –±–æ—Ç–∞ \n–Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞: https://t.me/MukhamedovK")

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        btn = await start_btn()
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:</b>", reply_markup=btn)

    elif text == "üìÑ –û –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ":
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!\n"
                             "–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –≤–∞—à–∏ —Ñ—Ä–∞–∑—ã –Ω–∞ <u><b>40</b></u> —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—ã—à–µ.\n"
                             "–ò –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ!\n–í—ã–±–∏—Ä–∞–µ—Ç–µ —è–∑—ã–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ <b>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b> –∏ –ø–∏—à–µ—Ç–µ —Å–≤–æ–∏ —Ñ—Ä–∞–∑—ã.\n"
                             "<b>–í—Å—ë!</b>\n"
                             "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ! :-)")

    elif text == "üìÑ –û –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ":
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!\n"
                             "–ó–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω <b>—Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç</b>:\n\n"
                             "¬©Ô∏è - –û—á–∏—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\nüîô - –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞(—Å–∏–º–≤–æ–ª–∞)\n% - –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n‚ûó - –î–µ–ª–µ–Ω–∏–µ\n"
                             "‚úñÔ∏è - –£–º–Ω–æ–∂–µ–Ω–∏–µ\n‚ûñ - –†–∞–∑–Ω–æ—Å—Ç—å(–º–∏–Ω—É—Å)\n‚ûï - –°—É–º–º–∞(–ø–ª—é—Å)\n. - –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞\n** - –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å\n\n"
                             "–ù–∞–¥–µ—é—Å—å —è –≤–∞–º –ø–æ–º–æ–≥ –∏ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–µ–Ω–∏–µ! :-)")


# TRANSLATOR CODE

@dp.callback_query_handler(text_contains='lan')
async def translate_callback(call: CallbackQuery, state: FSMContext):
    selected_lang_code = call.data.split(':')[-1]
    btn = await choice_lang_btn()

    await state.update_data(selected_lang_code=selected_lang_code)
    await call.message.answer("–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup=btn)
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ <u><b>—Ç–µ–∫—Å—Ç</b></u>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ <u><b>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏.</b></u>")
    await Continue.text.set()

    

@dp.message_handler(state=Continue.text)
async def translate_result(message: Message, state: FSMContext):
    translator = Translator()
    text = message.text
    data = await state.get_data()
    if text not in ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "üìÑ –û –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ"]:
        result = translator.translate(text=text, dest=data['selected_lang_code'])
        await message.answer(result.text)

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        btn = await start_btn()
        await message.answer("<b>–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:</b>", reply_markup=btn)
        await state.finish()

    elif text == "üìÑ –û –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–µ":
        await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}!\n"
                             "–ó–¥–µ—Å—å –Ω–∞–ø–∏—Å–∞–Ω <b>—Å–ø–∏—Å–æ–∫ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –∫–∞–∫—É—é —Ä–∞–±–æ—Ç—É –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç</b>:\n\n"
                             "¬©Ô∏è - –û—á–∏—â–µ–Ω–∏–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è\nüîô - –£–¥–∞–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞–∫–∞(—Å–∏–º–≤–æ–ª–∞)\n% - –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤\n‚ûó - –î–µ–ª–µ–Ω–∏–µ\n"
                             "‚úñÔ∏è - –£–º–Ω–æ–∂–µ–Ω–∏–µ\n‚ûñ - –†–∞–∑–Ω–æ—Å—Ç—å(–º–∏–Ω—É—Å)\n‚ûï - –°—É–º–º–∞(–ø–ª—é—Å)\n. - –ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –¥—Ä–æ–±–Ω—ã–µ —á–∏—Å–ª–∞\n** - –í–æ–∑–≤–µ–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–ø–µ–Ω—å\n\n"
                             "–ù–∞–¥–µ—é—Å—å —è –≤–∞–º –ø–æ–º–æ–≥ –∏ —Å–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–µ–Ω–∏–µ! :-)")
         


@dp.callback_query_handler(state=Continue.text, text='choice')
async def choice_lang(call: CallbackQuery, state: FSMContext):
    btn = await inline_btn()
    await state.finish()
    await call.message.edit_text("–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ <u><b>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b></u>?", reply_markup=btn)




# CALCULATOR CODE

@dp.callback_query_handler(text_contains='num')
async def calc_num_callback(call: CallbackQuery):
    selected_num = call.data.split(':')[-1]
    now_num = call.message.text
    if now_num != '0':
        new_num = now_num + selected_num
    else:
        new_num = selected_num
    btn = call.message.reply_markup
    await call.message.edit_text(new_num, reply_markup=btn)


@dp.callback_query_handler(text_contains='equ')
async def calc_num_callback(call: CallbackQuery):
    selected_equ = call.data.split(':')[-1]
    equ_list = ['/', '*', '+', '-', '**', '%', '.']
    now_num = call.message.text
    if now_num[-1] in equ_list:
        await call.answer('‚ùå')
    else:
        new_num = now_num + selected_equ
        btn = call.message.reply_markup
        await call.message.edit_text(new_num, reply_markup=btn)


@dp.callback_query_handler(text='clear')
async def calc_clear_callback(call: CallbackQuery):
    now_num = call.message.text
    if now_num != '0':
        btn = call.message.reply_markup
        await call.message.edit_text('0', reply_markup=btn)


@dp.callback_query_handler(text='back')
async def calc_back_callback(call: CallbackQuery):
    now_num = call.message.text
    if now_num != '0' and len(now_num) > 1:
        new_num = now_num[:-1]
        btn = call.message.reply_markup
        await call.message.edit_text(new_num, reply_markup=btn)
    else:
        btn = call.message.reply_markup
        await call.message.edit_text('0', reply_markup=btn)


@dp.callback_query_handler(text='.')
async def calc_icol_callback(call: CallbackQuery):
    now_num = call.message.text
    equ_list = ['/', '*', '+', '-', '**', '%', '.']
    if now_num[-1] != '.' and now_num[-1] not in equ_list:
        new_num = now_num + '.'
        btn = call.message.reply_markup
        await call.message.edit_text(new_num, reply_markup=btn)


@dp.callback_query_handler(text='result')
async def calc_result_callback(call: CallbackQuery):
    now_num = call.message.text
    equ_list = ['/', '*', '+', '-', '**', '%', '.']
    if now_num[-1] in equ_list:
        await call.answer('‚ùå')
    else:
        new_num = eval(now_num)
        btn = call.message.reply_markup
        await call.message.edit_text(new_num, reply_markup=btn)
    







if __name__ == '__main__':
    executor.start_polling(dp)
